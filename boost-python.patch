--- boost-1.30.2/boost/python/converter/builtin_converters.hpp.orig	2002-12-16 05:01:50.000000000 +0100
+++ boost-1.30.2/boost/python/converter/builtin_converters.hpp	2004-02-07 21:14:38.015285552 +0100
@@ -103,8 +103,8 @@
 // using Python's macro instead of Boost's - we don't seem to get the
 // config right all the time.
 # ifdef HAVE_LONG_LONG 
-BOOST_PYTHON_TO_PYTHON_BY_VALUE(signed LONG_LONG, PyLong_FromLongLong(x))
-BOOST_PYTHON_TO_PYTHON_BY_VALUE(unsigned LONG_LONG, PyLong_FromUnsignedLongLong(x))
+BOOST_PYTHON_TO_PYTHON_BY_VALUE(signed long long, PyLong_FromLongLong(x))
+BOOST_PYTHON_TO_PYTHON_BY_VALUE(unsigned long long, PyLong_FromUnsignedLongLong(x))
 # endif
     
 # undef BOOST_TO_PYTHON_INT
--- boost-1.30.2/libs/python/src/converter/builtin_converters.cpp.orig	2003-03-08 06:28:54.000000000 +0100
+++ boost-1.30.2/libs/python/src/converter/builtin_converters.cpp	2004-02-07 21:14:11.250354440 +0100
@@ -171,7 +171,7 @@
   
   struct long_long_rvalue_from_python : long_long_rvalue_from_python_base
   {
-      static LONG_LONG extract(PyObject* intermediate)
+      static long long extract(PyObject* intermediate)
       {
           if (PyInt_Check(intermediate))
           {
@@ -179,7 +179,7 @@
           }
           else
           {
-              LONG_LONG result = PyLong_AsLongLong(intermediate);
+              long long result = PyLong_AsLongLong(intermediate);
               
               if (PyErr_Occurred())
                   throw_error_already_set();
@@ -191,15 +191,15 @@
 
   struct unsigned_long_long_rvalue_from_python : long_long_rvalue_from_python_base
   {
-      static unsigned LONG_LONG extract(PyObject* intermediate)
+      static unsigned long long extract(PyObject* intermediate)
       {
           if (PyInt_Check(intermediate))
           {
-              return numeric_cast<unsigned LONG_LONG>(PyInt_AS_LONG(intermediate));
+              return numeric_cast<unsigned long long>(PyInt_AS_LONG(intermediate));
           }
           else
           {
-              unsigned LONG_LONG result = PyLong_AsUnsignedLongLong(intermediate);
+              unsigned long long result = PyLong_AsUnsignedLongLong(intermediate);
               
               if (PyErr_Occurred())
                   throw_error_already_set();
@@ -350,8 +350,8 @@
 // using Python's macro instead of Boost's - we don't seem to get the
 // config right all the time.
 # ifdef HAVE_LONG_LONG
-    slot_rvalue_from_python<signed LONG_LONG,long_long_rvalue_from_python>();
-    slot_rvalue_from_python<unsigned LONG_LONG,unsigned_long_long_rvalue_from_python>();
+    slot_rvalue_from_python<signed long long,long_long_rvalue_from_python>();
+    slot_rvalue_from_python<unsigned long long,unsigned_long_long_rvalue_from_python>();
 # endif
         
     // floating types
--- boost-1.30.2/libs/python/test/test_builtin_converters.cpp.orig	2003-03-10 18:25:52.000000000 +0100
+++ boost-1.30.2/libs/python/test/test_builtin_converters.cpp	2004-02-07 21:13:28.109912784 +0100
@@ -75,8 +75,8 @@
 // using Python's macro instead of Boost's - we don't seem to get the
 // config right all the time.
 #ifdef HAVE_LONG_LONG
-    def("rewrap_value_long_long", by_value<LONG_LONG>::rewrap);
-    def("rewrap_value_unsigned_long_long", by_value<unsigned LONG_LONG>::rewrap);
+    def("rewrap_value_long_long", by_value<long long>::rewrap);
+    def("rewrap_value_unsigned_long_long", by_value<unsigned long long>::rewrap);
 # endif 
     def("rewrap_value_float", by_value<float>::rewrap);
     def("rewrap_value_double", by_value<double>::rewrap);
@@ -106,8 +106,8 @@
 // using Python's macro instead of Boost's - we don't seem to get the
 // config right all the time.
 # ifdef HAVE_LONG_LONG
-    def("rewrap_const_reference_long_long", by_const_reference<LONG_LONG>::rewrap);
-    def("rewrap_const_reference_unsigned_long_long", by_const_reference<unsigned LONG_LONG>::rewrap);
+    def("rewrap_const_reference_long_long", by_const_reference<long long>::rewrap);
+    def("rewrap_const_reference_unsigned_long_long", by_const_reference<unsigned long long>::rewrap);
 # endif
     def("rewrap_const_reference_float", by_const_reference<float>::rewrap);
     def("rewrap_const_reference_double", by_const_reference<double>::rewrap);
--- boost-1.30.2/libs/python/build/Jamfile.orig	2003-01-10 16:04:05.000000000 +0100
+++ boost-1.30.2/libs/python/build/Jamfile	2004-02-07 22:15:09.786172456 +0100
@@ -59,6 +59,7 @@
     : ../src/$(sources)
     : $(BOOST_PYTHON_V2_PROPERTIES)
       <define>BOOST_PYTHON_SOURCE
+      <find-library>python$(PYTHON_VERSION)
       $(bpl-linkflags)
         <msvc-stlport><release>$(msvc-stlport-workarounds)
       ;
